#include "binary_trees.h"
#include  <limits.h>
#include <stdio.h>
/**
 *  * check - entry
 *   * @min: min range
 *    * @tree: ponter
 *     * @max: max range
 *      * Return: 1, 0
 *       */
int check(const binary_tree_t *tree, int min, int max)
{
	        if (tree == NULL)
			                return (1);
		        if (tree->n > max || tree->n < min)
				                return (0);
			        return ((check(tree->left, min, tree->n - 1)) &&
						                check(tree->right, tree->n + 1, max));
}
/**
 *  * binary_tree_is_bst - entry
 *   * @tree: pointer
 *    * Return: 0, 1
 *     */
int binary_tree_is_bst(const binary_tree_t *tree)
{
	        if (tree == NULL)
			                return (0);
		        return (check(tree, INT_MIN, INT_MAX));
}
int left_ba(const binary_tree_t *tree)
{
	        int right, left;

		        if (tree == NULL)
				                return (-1);

			        left = left_ba(tree->left);
				        right = left_ba(tree->right);

					        return (left > right ? left + 1 : right + 1);
}
/**
 *  * right_ba - entry
 *   * @tree: ponter
 *    * Return: right height
 *     */
int right_ba(const binary_tree_t *tree)
{
	        int left, right;

		        if (tree == NULL)
				                return (-1);
			        left = right_ba(tree->left);
				        right = right_ba(tree->right);

					        return (left > right ? left + 1 : right + 1);
}
/**
 *  * binary_tree_balance - entry
 *   * @tree: pointer
 *    * Return: balance
 *     */
int binary_tree_balance(const binary_tree_t *tree)
{
	        int left, right;

		        if (tree == NULL)
				                return (0);
			        left = left_ba(tree->left);
				        right = right_ba(tree->right);

					        return (left - right);
}
int binary_tree_is_avl(const binary_tree_t *tree)
{
	if (tree == NULL)
		return (0);
	int bst = binary_tree_is_bst(tree);
	int bl = binary_tree_balance(tree);
	
	printf("%d = bst\n%d = bl\n", bst, bl);
	if ((bst == 1) && (bl == -1 || bl == 1 || bl == 0))
		return (1);

	return (0);
}
